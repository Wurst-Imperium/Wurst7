name: Publish Multiple Releases
run-name: Publish v${{ inputs.wurst_version }} build(s) from ${{ inputs.branches }}

on:
  workflow_dispatch:
    inputs:
      wurst_version:
        description: "Wurst version (without v or -MC)"
        required: true
        type: string
      branches:
        description: "Space-separated list of branches to publish from"
        required: true
        type: string
      announce_update:
        description: "Announce as an update on WurstForum"
        required: true
        type: boolean
        default: false
      announce_ports:
        description: "Announce as ports on WurstForum"
        required: true
        type: boolean
        default: false
      dry_run:
        description: "Dry-run mode (don't actually publish anything)"
        required: false
        type: boolean
        default: false

permissions:
  # Needed to trigger the publish workflow.
  actions: write

jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.set_branches.outputs.branches }}
    steps:
    - name: Convert branches input to JSON array
      id: set_branches
      run: |
        branches_array=(${{ inputs.branches }})
        quoted_branches=$(printf '"%s",' "${branches_array[@]}")
        JSON_ARRAY="[${quoted_branches%,}]"
        echo "branches=$JSON_ARRAY" >> "$GITHUB_OUTPUT"
        echo "Branches: $JSON_ARRAY" >> "$GITHUB_STEP_SUMMARY"

  publish_each:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ !fromJson(inputs.dry_run) }}
    strategy:
      # Each job pushes an automated commit to WurstClient.net@master, so running them all in parallel
      # would likely cause conflicts. Also, various servers might hit rate limits if we just upload
      # all of the files at once.
      max-parallel: 1
      # If something goes wrong, all published files have to be manually deleted.
      # Best to fail as early as possible.
      fail-fast: true
      matrix:
        branch: ${{ fromJson(needs.prepare.outputs.branches) }}
    # TODO: Maybe also verify that the wurst_version in each branch is as expected before publishing?
    steps:
    - name: Trigger publish workflow
      uses: Wurst-Imperium/dispatch-and-wait@v1
      with:
        token: ${{ github.token }}
        owner: Wurst-Imperium
        repo: Wurst7
        ref: ${{ matrix.branch }}
        workflow: publish.yml
        workflow_inputs: |
          {
            "close_milestone": "true",
            "upload_backups": "true",
            "publish_github": "true",
            "update_website": "true"
          }
        run_timeout_seconds: 1800  # 30 minutes

  announce_update:
    runs-on: ubuntu-latest
    needs: [prepare, publish_each]
    if: ${{ !failure() && !cancelled() && inputs.announce_update }}
    steps:
    - name: Trigger announce workflow
      uses: Wurst-Imperium/dispatch-and-wait@v1
      with:
        token: ${{ secrets.WURSTCLIENT_NET_PUBLISH_TOKEN }}
        owner: Wurst-Imperium
        repo: WurstClient.net
        ref: gh-pages
        workflow: announce_wurst_update.yml
        workflow_inputs: |
          {
            "wurst_version": "${{ inputs.wurst_version }}",
            "dry_run": "${{ inputs.dry_run }}"
          }
        run_timeout_seconds: 600  # 10 minutes

  announce_ports:
    runs-on: ubuntu-latest
    needs: [prepare, publish_each]
    if: ${{ !failure() && !cancelled() && inputs.announce_ports }}
    steps:
    - name: Trigger announce workflow
      uses: Wurst-Imperium/dispatch-and-wait@v1
      with:
        token: ${{ secrets.WURSTCLIENT_NET_PUBLISH_TOKEN }}
        owner: Wurst-Imperium
        repo: WurstClient.net
        ref: gh-pages
        workflow: announce_wurst_ports.yml
        workflow_inputs: |
          {
            "wurst_version": "${{ inputs.wurst_version }}",
            "branches": "${{ inputs.branches }}",
            "dry_run": "${{ inputs.dry_run }}"
          }
        run_timeout_seconds: 600  # 10 minutes
